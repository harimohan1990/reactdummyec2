name: CICD â€” Build, Push & Deploy to EC2 ðŸš€

on:
  workflow_dispatch:
  push:
    branches: [ "main", "master" ]

jobs:
  infra:
    name: Provision EC2 Infrastructure via Terraform
    runs-on: ubuntu-latest

    steps:
      # Step 1 â€” Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2 â€” Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      # Step 3 â€” Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: ./infra

      # Step 4 â€” Validate Terraform
      - name: Terraform Validate
        run: terraform validate
        working-directory: ./infra

      # Step 5 â€” Plan Terraform
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./infra

      # Step 6 â€” Apply Terraform (auto-approve)
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./infra

  build_and_deploy:
    name: Build, Push & Deploy
    runs-on: ubuntu-latest
    needs: infra  # wait until Terraform finishes first

    steps:
      # Step 1 â€” Checkout source
      - name: Checkout Source
        uses: actions/checkout@v4

      # Step 2 â€” Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3 â€” Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 4 â€” Build and push Docker image (with version tag)
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: ./my-app
          file: ./my-app/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/harim1:latest
            ${{ secrets.DOCKER_USERNAME }}/harim1:${{ github.run_number }}

      # Step 5 â€” Deploy on EC2 via SSH
      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: |
            ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "ðŸš€ Pulling latest Docker image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/harim1:latest

            echo "ðŸ§¹ Cleaning up old container..."
            docker stop harim1 || true
            docker rm harim1 || true

            echo "ðŸ”¥ Running new container..."
            docker run -d -p 80:80 --name harim1 ${{ secrets.DOCKER_USERNAME }}/harim1:latest

            echo "âœ… Deployment completed successfully!"
